"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8052],{6262:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,a]of s)e[i]=a;return e}},2286:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>l,data:()=>t});var a=e(641);const n={},l=(0,e(6262).A)(n,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="linux-gcc安装" tabindex="-1"><a class="header-anchor" href="#linux-gcc安装"><span>Linux gcc安装</span></a></h1><h3 id="代码解释" tabindex="-1"><a class="header-anchor" href="#代码解释"><span>代码解释</span></a></h3><ol><li><p><strong>挂载光盘</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mount</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/cdrom</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /media</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令将光盘设备 <code>/dev/cdrom</code> 挂载到 <code>/media</code> 目录下。挂载后，可以通过访问 <code>/media</code> 目录来使用光盘中的内容。</p></li><li><p><strong>创建新目录</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/mly/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令在 <code>/home/</code> 下创建一个名为 <code>mly</code> 的新目录。</p></li><li><p><strong>移动 Yum 配置文件</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mv</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/yum.repos.d/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/mly/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将现有的所有 YUM 仓库配置文件从 <code>/etc/yum.repos.d/</code> 目录移动到新创建的 <code>/home/mly/</code> 目录中。这样做的目的是为了清空原来的仓库配置，准备配置新的本地仓库。</p></li><li><p><strong>创建本地 YUM 仓库配置</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/etc/yum.repos.d/1.repo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;&lt; </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">[Media]</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">name=Media</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">baseurl=file:///media</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">gpgcheck=0</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">enabled=1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EOF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这条命令创建了一个新的仓库配置文件 <code>/etc/yum.repos.d/1.repo</code>，并配置了一个名为 <code>Media</code> 的本地仓库。配置项解释如下：</p><ul><li><code>[Media]</code>：仓库的名字。</li><li><code>name=Media</code>：仓库的描述信息。</li><li><code>baseurl=file:///media</code>：指定仓库的本地路径为 <code>/media</code>，即光盘挂载的目录。</li><li><code>gpgcheck=0</code>：禁用 GPG 校验，因为通常光盘中的包不进行 GPG 校验。</li><li><code>enabled=1</code>：启用该仓库。</li></ul></li><li><p><strong>安装 GCC 编译器</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -y</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <code>yum</code> 包管理器安装 GCC 编译器。<code>-y</code> 选项表示自动回答所有提示为 &quot;yes&quot;，以便非交互式地完成安装。</p></li><li><p><strong>查找 GCC 安装位置</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">whereis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gcc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令查找并显示 <code>gcc</code> 编译器的安装位置（路径）。它返回 GCC 的二进制文件、源代码和手册等文件的路径。</p></li></ol>',3)]))}]]),t=JSON.parse('{"path":"/posts/code/2.html","title":"Linux gcc安装","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-11-02T00:00:00.000Z","category":["code"],"tag":["Linux","gcc"],"star":true,"description":"Linux gcc安装 代码解释 挂载光盘 这条命令将光盘设备 /dev/cdrom 挂载到 /media 目录下。挂载后，可以通过访问 /media 目录来使用光盘中的内容。 创建新目录 这条命令在 /home/ 下创建一个名为 mly 的新目录。 移动 Yum 配置文件 将现有的所有 YUM 仓库配置文件从 /etc/yum.repos.d/ 目录...","head":[["meta",{"property":"og:url","content":"https://github.com/Mly66/blog/posts/code/2.html"}],["meta",{"property":"og:site_name","content":"马瑶瑶瑶瑶瑶"}],["meta",{"property":"og:title","content":"Linux gcc安装"}],["meta",{"property":"og:description","content":"Linux gcc安装 代码解释 挂载光盘 这条命令将光盘设备 /dev/cdrom 挂载到 /media 目录下。挂载后，可以通过访问 /media 目录来使用光盘中的内容。 创建新目录 这条命令在 /home/ 下创建一个名为 mly 的新目录。 移动 Yum 配置文件 将现有的所有 YUM 仓库配置文件从 /etc/yum.repos.d/ 目录..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-26T15:23:46.000Z"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"gcc"}],["meta",{"property":"article:published_time","content":"2024-11-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-26T15:23:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux gcc安装\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-26T15:23:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Mly\\",\\"url\\":\\"https://mly66.github.io/blog/\\"}]}"]]},"headers":[{"level":3,"title":"代码解释","slug":"代码解释","link":"#代码解释","children":[]}],"git":{"createdTime":1732634626000,"updatedTime":1732634626000,"contributors":[{"name":"Mly66","email":"3127328609@qq.com","commits":1}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"posts/code/2.md","localizedDate":"2024年11月2日","excerpt":"\\n<h3>代码解释</h3>\\n<ol>\\n<li>\\n<p><strong>挂载光盘</strong></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">mount</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> /dev/cdrom</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> /media</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>这条命令将光盘设备 <code>/dev/cdrom</code> 挂载到 <code>/media</code> 目录下。挂载后，可以通过访问 <code>/media</code> 目录来使用光盘中的内容。</p>\\n</li>\\n<li>\\n<p><strong>创建新目录</strong></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">mkdir</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> /home/mly/</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>这条命令在 <code>/home/</code> 下创建一个名为 <code>mly</code> 的新目录。</p>\\n</li>\\n<li>\\n<p><strong>移动 Yum 配置文件</strong></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">mv</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> /etc/yum.repos.d/</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">*</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> /home/mly/</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>将现有的所有 YUM 仓库配置文件从 <code>/etc/yum.repos.d/</code> 目录移动到新创建的 <code>/home/mly/</code> 目录中。这样做的目的是为了清空原来的仓库配置，准备配置新的本地仓库。</p>\\n</li>\\n<li>\\n<p><strong>创建本地 YUM 仓库配置</strong></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">cat</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &gt; </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">/etc/yum.repos.d/1.repo</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;&lt; </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">EOF</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">[Media]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">name=Media</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">baseurl=file:///media</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">gpgcheck=0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">enabled=1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">EOF</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>这条命令创建了一个新的仓库配置文件 <code>/etc/yum.repos.d/1.repo</code>，并配置了一个名为 <code>Media</code> 的本地仓库。配置项解释如下：</p>\\n<ul>\\n<li><code>[Media]</code>：仓库的名字。</li>\\n<li><code>name=Media</code>：仓库的描述信息。</li>\\n<li><code>baseurl=file:///media</code>：指定仓库的本地路径为 <code>/media</code>，即光盘挂载的目录。</li>\\n<li><code>gpgcheck=0</code>：禁用 GPG 校验，因为通常光盘中的包不进行 GPG 校验。</li>\\n<li><code>enabled=1</code>：启用该仓库。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>安装 GCC 编译器</strong></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">yum</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> -y</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> gcc</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>使用 <code>yum</code> 包管理器安装 GCC 编译器。<code>-y</code> 选项表示自动回答所有提示为 \\"yes\\"，以便非交互式地完成安装。</p>\\n</li>\\n<li>\\n<p><strong>查找 GCC 安装位置</strong></p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">whereis</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> gcc</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>该命令查找并显示 <code>gcc</code> 编译器的安装位置（路径）。它返回 GCC 的二进制文件、源代码和手册等文件的路径。</p>\\n</li>\\n</ol>","autoDesc":true}')}}]);