"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1759],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},4516:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>t});var e=a(641);const n={},l=(0,a(6262).A)(n,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<h1 id="爬虫code" tabindex="-1"><a class="header-anchor" href="#爬虫code"><span>爬虫code</span></a></h1><h2 id="_1-requests-库" tabindex="-1"><a class="header-anchor" href="#_1-requests-库"><span>1. Requests 库</span></a></h2><h3 id="_1-1-安装与使用" tabindex="-1"><a class="header-anchor" href="#_1-1-安装与使用"><span>1.1 安装与使用</span></a></h3><p>Requests 是一个非常流行的第三方 HTTP 请求库。使用前需要先安装：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装完成后，在代码中引入即可：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-2-基本用法-get-请求" tabindex="-1"><a class="header-anchor" href="#_1-2-基本用法-get-请求"><span>1.2 基本用法：GET 请求</span></a></h3><p>使用 <code>get</code> 方法可以发送 HTTP GET 请求，获取指定 URL 的响应内容。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://example.com&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;状态码:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, response.status_code)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印状态码</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;响应内容:&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, response.text)       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 打印网页内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>response</code> 对象包含了服务器返回的所有信息，包括状态码、响应头和响应内容。</p><h3 id="_1-3-response-对象与-request-对象" tabindex="-1"><a class="header-anchor" href="#_1-3-response-对象与-request-对象"><span>1.3 Response 对象与 Request 对象</span></a></h3><ul><li><p><strong>Response 对象</strong>：包含服务器返回的响应信息。</p><ul><li><code>response.status_code</code>：HTTP 状态码，如 200、404 等。</li><li><code>response.text</code>：响应内容，通常为字符串（文本、HTML 等）。</li><li><code>response.json()</code>：如果响应内容为 JSON 格式，可调用该方法解析为 Python 数据结构。</li><li><code>response.headers</code>：响应头信息，以字典形式呈现。</li></ul></li><li><p><strong>Request 对象</strong>：通常在底层构造请求时使用，包含请求方法、URL、头信息等。对于日常使用，我们更多关注 Response 对象，而请求对象的细节由 Requests 库内部处理。</p></li></ul><h3 id="_1-4-常用-http-方法" tabindex="-1"><a class="header-anchor" href="#_1-4-常用-http-方法"><span>1.4 常用 HTTP 方法</span></a></h3><p>Requests 提供了 7 个常用的方法，分别对应 HTTP 的不同请求方式：</p><ul><li><strong>get</strong>：获取资源，如读取网页数据。</li><li><strong>post</strong>：向服务器提交数据，例如提交表单。</li><li><strong>put</strong>：更新服务器上的资源（一般为替换）。</li><li><strong>delete</strong>：删除服务器上的资源。</li><li><strong>head</strong>：仅获取响应头，常用于检查资源是否存在或获取元数据。</li><li><strong>options</strong>：获取服务器支持的 HTTP 方法。</li><li><strong>patch</strong>：对资源进行部分更新。</li></ul><h4 id="post-请求示例" tabindex="-1"><a class="header-anchor" href="#post-请求示例"><span>POST 请求示例</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://httpbin.org/post&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;name&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Alice&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;age&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">post</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;POST 请求响应：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, response.text)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="put-请求示例" tabindex="-1"><a class="header-anchor" href="#put-请求示例"><span>PUT 请求示例</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://httpbin.org/put&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;update&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;true&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PUT 请求响应：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, response.text)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-beautiful-soup-库" tabindex="-1"><a class="header-anchor" href="#_2-beautiful-soup-库"><span>2. Beautiful Soup 库</span></a></h2><p>Beautiful Soup 是一个用于解析 HTML 和 XML 文件的库，常与 Requests 配合使用来提取网页数据。</p><h3 id="_2-1-安装与使用" tabindex="-1"><a class="header-anchor" href="#_2-1-安装与使用"><span>2.1 安装与使用</span></a></h3><p>安装命令如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> beautifulsoup4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>引入库并创建 BeautifulSoup 对象：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bs4 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BeautifulSoup</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;http://example.com&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requests.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 lxml 解析器解析 HTML 内容，也可使用 &#39;html.parser&#39;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">soup </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> BeautifulSoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(response.text, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;lxml&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 格式化输出 HTML 结构</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(soup.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">prettify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-基本元素与查找方法" tabindex="-1"><a class="header-anchor" href="#_2-2-基本元素与查找方法"><span>2.2 基本元素与查找方法</span></a></h3><ul><li><strong>Tag（标签）</strong>：代表 HTML 中的标签，例如 <code>&lt;a&gt;</code>、<code>&lt;div&gt;</code> 等。</li><li><strong>NavigableString</strong>：标签内的文本内容。</li><li><strong>BeautifulSoup 对象</strong>：代表整个 HTML 文档。</li></ul><p>常用的查找方法有：</p><ul><li><code>find()</code>：查找第一个符合条件的标签。</li><li><code>find_all()</code>：查找所有符合条件的标签。</li></ul><h4 id="示例-查找所有链接" tabindex="-1"><a class="header-anchor" href="#示例-查找所有链接"><span>示例：查找所有链接</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">links </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> soup.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">find_all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> link </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> links:</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;链接文本：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, link.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;链接地址：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, link.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;href&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_3-re-库-正则表达式" tabindex="-1"><a class="header-anchor" href="#_3-re-库-正则表达式"><span>3. re 库（正则表达式）</span></a></h2><p>Python 内置的 <code>re</code> 模块用于字符串匹配和处理，常用于提取、替换或验证字符串格式。</p><h3 id="_3-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_3-1-基本概念"><span>3.1 基本概念</span></a></h3><ul><li><strong>正则表达式</strong>：由普通字符与特殊字符（如 <code>^</code>、<code>$</code>、<code>*</code>、<code>+</code>、<code>?</code> 等）构成，用于描述字符串模式。</li><li><strong>贪婪匹配</strong>：默认尽可能多地匹配字符。</li><li><strong>最小匹配</strong>：在量词后添加 <code>?</code> 实现，匹配尽可能少的字符。</li></ul><h3 id="_3-2-常用方法" tabindex="-1"><a class="header-anchor" href="#_3-2-常用方法"><span>3.2 常用方法</span></a></h3><ul><li><code>re.compile(pattern)</code>：编译正则表达式，生成正则对象。</li><li><code>match()</code>：从字符串开始处匹配正则表达式。</li><li><code>search()</code>：扫描整个字符串并返回第一个匹配项。</li><li><code>findall()</code>：返回所有非重复匹配的列表。</li></ul><h4 id="示例-匹配邮箱地址" tabindex="-1"><a class="header-anchor" href="#示例-匹配邮箱地址"><span>示例：匹配邮箱地址</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;请联系邮箱：example@test.com 或者 admin@domain.com 获取更多信息。&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">pattern </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">compile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">\\w</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">]+</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">@</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">\\w</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">]+</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">emails </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pattern.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">findall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(text)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;匹配到的邮箱：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, emails)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-贪婪与非贪婪匹配" tabindex="-1"><a class="header-anchor" href="#示例-贪婪与非贪婪匹配"><span>示例：贪婪与非贪婪匹配</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;div&gt;内容1&lt;/div&gt;&lt;div&gt;内容2&lt;/div&gt;&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 贪婪匹配</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">greedy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;&lt;div&gt;.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&lt;/div&gt;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, text)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;贪婪匹配结果：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, greedy.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 非贪婪匹配</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">non_greedy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;&lt;div&gt;.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&lt;/div&gt;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, text)</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;非贪婪匹配结果：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, non_greedy.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4-scrapy-爬虫框架" tabindex="-1"><a class="header-anchor" href="#_4-scrapy-爬虫框架"><span>4. Scrapy 爬虫框架</span></a></h2><p>Scrapy 是一个功能强大的爬虫框架，适合构建复杂的爬虫项目。它封装了网络请求、数据提取、数据存储等功能。</p><h3 id="_4-1-项目结构" tabindex="-1"><a class="header-anchor" href="#_4-1-项目结构"><span>4.1 项目结构</span></a></h3><p>Scrapy 项目通常包含如下目录和文件：</p><ul><li><strong>spiders/</strong>：存放爬虫文件，每个爬虫都是一个 Python 类，继承自 <code>scrapy.Spider</code>。</li><li><strong>items.py</strong>：定义数据结构。</li><li><strong>pipelines.py</strong>：处理提取的数据，例如数据清洗或保存。</li><li><strong>middlewares.py</strong>：自定义中间件，可在请求和响应过程中做额外处理。</li><li><strong>settings.py</strong>：全局配置，包括并发、下载延迟、User-Agent 等。</li></ul><h3 id="_4-2-常用命令" tabindex="-1"><a class="header-anchor" href="#_4-2-常用命令"><span>4.2 常用命令</span></a></h3><ul><li><strong>创建项目</strong>：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scrapy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> startproject</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myproject</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>生成爬虫</strong>：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> myproject</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scrapy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> genspider</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>运行爬虫</strong>：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scrapy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> crawl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_4-3-示例爬虫" tabindex="-1"><a class="header-anchor" href="#_4-3-示例爬虫"><span>4.3 示例爬虫</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 文件：myproject/spiders/example_spider.py</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scrapy</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ExampleSpider</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">scrapy</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Spider</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;example&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    allowed_domains </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    start_urls </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;http://example.com&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 提取页面标题</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        title </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> response.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">xpath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;//title/text()&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        yield</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;title&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: title}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行爬虫后，Scrapy 会自动发送请求、解析响应，并将提取的数据通过管道处理（例如保存到文件或数据库）。</p><hr><h2 id="省流" tabindex="-1"><a class="header-anchor" href="#省流"><span>省流</span></a></h2><ul><li><strong>Requests 库</strong>：简单易用，适合发送 HTTP 请求，处理响应内容；常用方法包括 get、post、put 等。</li><li><strong>Beautiful Soup</strong>：强大的 HTML/XML 解析工具，通过结构化方式提取网页内容。</li><li><strong>re 库</strong>：内置正则表达式模块，用于复杂的字符串匹配和处理，支持贪婪与非贪婪匹配。</li><li><strong>Scrapy 框架</strong>：适用于大规模爬虫项目，提供丰富的功能和灵活的配置，能高效地管理请求、解析数据和存储结果。</li></ul>',59)]))}]]),t=JSON.parse('{"path":"/posts/code/7.html","title":"爬虫code","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-03-26T00:00:00.000Z","category":["learn"],"tag":["python"],"description":"爬虫code 1. Requests 库 1.1 安装与使用 Requests 是一个非常流行的第三方 HTTP 请求库。使用前需要先安装： 安装完成后，在代码中引入即可： 1.2 基本用法：GET 请求 使用 get 方法可以发送 HTTP GET 请求，获取指定 URL 的响应内容。 在上面的代码中，response 对象包含了服务器返回的所有信息...","head":[["meta",{"property":"og:url","content":"https://github.com/Mly66/blog/posts/code/7.html"}],["meta",{"property":"og:site_name","content":"马瑶瑶瑶瑶瑶"}],["meta",{"property":"og:title","content":"爬虫code"}],["meta",{"property":"og:description","content":"爬虫code 1. Requests 库 1.1 安装与使用 Requests 是一个非常流行的第三方 HTTP 请求库。使用前需要先安装： 安装完成后，在代码中引入即可： 1.2 基本用法：GET 请求 使用 get 方法可以发送 HTTP GET 请求，获取指定 URL 的响应内容。 在上面的代码中，response 对象包含了服务器返回的所有信息..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-26T01:37:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:published_time","content":"2025-03-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-26T01:37:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"爬虫code\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-26T01:37:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Mly\\",\\"url\\":\\"https://mly66.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"1. Requests 库","slug":"_1-requests-库","link":"#_1-requests-库","children":[{"level":3,"title":"1.1 安装与使用","slug":"_1-1-安装与使用","link":"#_1-1-安装与使用","children":[]},{"level":3,"title":"1.2 基本用法：GET 请求","slug":"_1-2-基本用法-get-请求","link":"#_1-2-基本用法-get-请求","children":[]},{"level":3,"title":"1.3 Response 对象与 Request 对象","slug":"_1-3-response-对象与-request-对象","link":"#_1-3-response-对象与-request-对象","children":[]},{"level":3,"title":"1.4 常用 HTTP 方法","slug":"_1-4-常用-http-方法","link":"#_1-4-常用-http-方法","children":[]}]},{"level":2,"title":"2. Beautiful Soup 库","slug":"_2-beautiful-soup-库","link":"#_2-beautiful-soup-库","children":[{"level":3,"title":"2.1 安装与使用","slug":"_2-1-安装与使用","link":"#_2-1-安装与使用","children":[]},{"level":3,"title":"2.2 基本元素与查找方法","slug":"_2-2-基本元素与查找方法","link":"#_2-2-基本元素与查找方法","children":[]}]},{"level":2,"title":"3. re 库（正则表达式）","slug":"_3-re-库-正则表达式","link":"#_3-re-库-正则表达式","children":[{"level":3,"title":"3.1 基本概念","slug":"_3-1-基本概念","link":"#_3-1-基本概念","children":[]},{"level":3,"title":"3.2 常用方法","slug":"_3-2-常用方法","link":"#_3-2-常用方法","children":[]}]},{"level":2,"title":"4. Scrapy 爬虫框架","slug":"_4-scrapy-爬虫框架","link":"#_4-scrapy-爬虫框架","children":[{"level":3,"title":"4.1 项目结构","slug":"_4-1-项目结构","link":"#_4-1-项目结构","children":[]},{"level":3,"title":"4.2 常用命令","slug":"_4-2-常用命令","link":"#_4-2-常用命令","children":[]},{"level":3,"title":"4.3 示例爬虫","slug":"_4-3-示例爬虫","link":"#_4-3-示例爬虫","children":[]}]},{"level":2,"title":"省流","slug":"省流","link":"#省流","children":[]}],"git":{"createdTime":1742953034000,"updatedTime":1742953034000,"contributors":[{"name":"Mly66","email":"3127328609@qq.com","commits":1}]},"readingTime":{"minutes":4.57,"words":1371},"filePathRelative":"posts/code/7.md","localizedDate":"2025年3月26日","excerpt":"\\n<h2>1. Requests 库</h2>\\n<h3>1.1 安装与使用</h3>\\n<p>Requests 是一个非常流行的第三方 HTTP 请求库。使用前需要先安装：</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">pip</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> requests</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);