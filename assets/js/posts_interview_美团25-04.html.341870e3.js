"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3482],{6262:(i,l)=>{l.A=(i,l)=>{const s=i.__vccOpts||i;for(const[i,e]of l)s[i]=e;return s}},7243:(i,l,s)=>{s.r(l),s.d(l,{comp:()=>o,data:()=>t});var e=s(641);const n={},o=(0,s(6262).A)(n,[["render",function(i,l){return(0,e.uX)(),(0,e.CE)("div",null,l[0]||(l[0]=[(0,e.Fv)('<h1 id="美团春招" tabindex="-1"><a class="header-anchor" href="#美团春招"><span>美团春招</span></a></h1><h2 id="一、linux-系统-进程管理-🐧" tabindex="-1"><a class="header-anchor" href="#一、linux-系统-进程管理-🐧"><span>一、Linux 系统 &amp; 进程管理 🐧</span></a></h2><ol><li><p><strong>查看内存使用情况</strong></p><ul><li><code>free -h</code><ul><li><code>total</code>/<code>used</code>/<code>free</code>/<code>shared</code>/<code>buff/cache</code>/<code>available</code></li><li><code>-m</code> 可按 MB 显示，更精确</li></ul></li><li><code>top</code> / <code>htop</code><ul><li>按 <code>%MEM</code> 排序：<code>Shift + M</code></li><li>查看 RES（常驻集大小）、VIRT（虚拟内存）、SWAP</li></ul></li><li><code>vmstat 1 5</code><ul><li><code>r</code>（运行队列）、<code>b</code>（不可中断睡眠）、<code>si</code>/<code>so</code>（Swap 进出）</li></ul></li><li><code>ps aux --sort=-%mem | head</code>：查看最耗内存进程</li></ul></li><li><p><strong>物理内存 vs 虚拟内存</strong></p><ul><li><strong>物理</strong>：直接读写 DRAM</li><li><strong>虚拟</strong>：CPU + MMU 分页，将虚拟地址映射到物理页框 + Swap <ul><li><strong>页表</strong>：记录映射关系</li><li><strong>缺页中断</strong>：访问未映射页 → 内核加载或 Swap 交换</li></ul></li></ul></li><li><p><strong>Swap 交换内存</strong></p><ul><li><strong>用途</strong>：RAM 不够时，非热数据移到磁盘</li><li><strong>优点</strong>：避免 OOM，临时“超配”</li><li><strong>缺点</strong>：磁盘 I/O 慢 → 卡顿</li><li><strong>调优</strong>：<code>swappiness</code> 参数（0–100，越低越少用 Swap）</li></ul></li><li><p><strong>用户 &amp; 用户组管理</strong></p><ul><li><code>useradd -m username</code>：同时创建家目录</li><li><code>usermod -aG wheel username</code>：追加到 wheel 组（sudo）</li><li><code>passwd -l username</code> / <code>passwd -u username</code>：锁/解锁账户</li><li><code>groupdel groupname</code>：删除组</li></ul></li><li><p><strong>用户态 vs 内核态</strong></p><ul><li><strong>用户态</strong>：只能执行受限指令，APP 崩溃不拖垮内核</li><li><strong>内核态</strong>：全权限，管理调度、中断、I/O</li><li><strong>切换</strong>：通过软中断（系统调用）或硬中断</li><li><strong>面试点</strong>：STI/CLI 指令、特权级（Ring 0/3）</li></ul></li><li><p><strong>进程间通信（IPC）</strong></p><ul><li><strong>匿名管道</strong> <code>|</code>：仅限父子进程</li><li><strong>命名管道</strong> <code>mkfifo /tmp/f</code>：任意进程打开读写</li><li><strong>共享内存</strong> <code>shmget()/shmat()</code>：最快，需配信号量同步</li><li><strong>消息队列</strong> <code>msgget()/msgsnd()/msgrcv()</code>：按消息类型过滤</li><li><strong>信号量</strong> <code>semget()</code>：用于保护临界区</li><li><strong>Socket</strong>：支持本地（UNIX Domain）与网络通信</li></ul></li><li><p><strong>管道 vs 重定向</strong></p><ul><li><strong>管道</strong>：无中介文件，直接内存传输。例：<code>ps aux | grep nginx</code></li><li><strong>重定向</strong>：与文件交互。例：<code>grep error log.txt &gt; errors.txt</code></li></ul></li></ol><hr><h2 id="二、linux-文件-权限管理-📁" tabindex="-1"><a class="header-anchor" href="#二、linux-文件-权限管理-📁"><span>二、Linux 文件 &amp; 权限管理 📁</span></a></h2><ol><li><p><strong>查看文件内容</strong></p><ul><li><code>cat file</code>：小文件一键看全</li><li><code>less file</code>：大文件翻页，支持正则搜索 <code>/pattern</code></li><li><code>head -n10 file</code> / <code>tail -n20 file</code>（<code>-f</code> 实时追加）</li><li><code>nl file</code>：带行号显示</li></ul></li><li><p><strong>修改权限 &amp; 所有者</strong></p><ul><li><strong>数字法</strong><ul><li><code>chmod 754 file</code> → Owner=rwx (7), Group= r-x (5), Other= r– (4)</li></ul></li><li><strong>符号法</strong><ul><li><code>chmod g+w,o-r file</code> → 给组写、去除其他读</li></ul></li><li><code>chown alice:dev file</code> → user=alice, group=dev</li><li><strong>粘滞位</strong> <code>/tmp</code> 上常见：仅文件 owner 可删</li></ul></li><li><p><strong>文件操作</strong></p><ul><li><code>touch file</code>/<code>&gt;file</code>（清空）</li><li><code>cp -r src/ dest/</code>（目录）</li><li><code>mv file dir/</code>（移动/重命名）</li><li><code>rm -rf dir/</code>（小心！）</li><li><code>ln -s /path/to/src linkname</code>（软链接）</li></ul></li><li><p><strong>查找最近更新</strong></p><ul><li><code>find /var/log -type f -mtime -1</code>（24h）</li><li><code>find . -type f -mmin -30</code>（30min）</li><li><code>-iname &quot;*.log&quot;</code>（忽略大小写）</li></ul></li><li><p><strong>磁盘使用</strong></p><ul><li><code>df -hT</code>：显示文件系统类型 + 大小</li><li><code>du -sh /home/*</code>：各家目录占用</li><li><code>du --max-depth=2 -h /var</code>：分层查看</li></ul></li><li><p><strong>查看端口占用</strong></p><ul><li><code>ss -tulpen</code>：比 <code>netstat</code> 更快</li><li><code>lsof -i TCP:22</code> → SSH 端口</li><li><code>fuser -n tcp 80</code>：显示进程 PID</li></ul></li></ol><hr><h2 id="三、mysql-数据库设计-🛢️" tabindex="-1"><a class="header-anchor" href="#三、mysql-数据库设计-🛢️"><span>三、MySQL &amp; 数据库设计 🛢️</span></a></h2><h3 id="a-sql-索引" tabindex="-1"><a class="header-anchor" href="#a-sql-索引"><span>A. SQL &amp; 索引</span></a></h3><ol><li><p><strong>GROUP BY vs HAVING</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dept, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cnt</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> employees</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;active&#39;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GROUP BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> dept</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HAVING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cnt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- HAVING 可用别名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>JOIN 对比</strong></p><ul><li><code>INNER JOIN</code>：符合多表过滤</li><li><code>LEFT JOIN</code>：保留左表所有行</li><li><code>RIGHT JOIN</code>：保留右表所有行</li><li><strong>示例</strong>：客户–订单联查、保留无订单客户</li></ul></li><li><p><strong>深度分页</strong></p><ul><li><strong>原始</strong>：<code>LIMIT 1000000, 10</code> → 慢</li><li><strong>优化</strong>：<code>WHERE id &gt; (SELECT id FROM t ORDER BY id LIMIT 1000000,1) LIMIT 10</code></li><li><strong>覆盖索引</strong>：只读索引字段，<code>force index</code></li></ul></li><li><p><strong>索引原理</strong></p><ul><li>B+ 树：非叶子只存键，叶子串成链表 → 范围友好</li><li><strong>空间换时间</strong>，写入时额外维护成本</li></ul></li><li><p><strong>何时加索引</strong></p><ul><li><strong>WHERE</strong>、<strong>JOIN</strong>、<strong>ORDER BY</strong>、<strong>GROUP BY</strong> 列</li><li><strong>高选择性</strong>＋<strong>覆盖率</strong> 推荐</li><li>避免过多索引（影响 DML 性能）</li></ul></li><li><p><strong>EXPLAIN</strong></p><ul><li><code>type</code>: ALL（全表）、index、range、ref、eq_ref、const 最优</li><li><code>possible_keys</code>: 可用索引</li><li><code>key</code>: 实际用上索引</li><li><code>rows</code>: 预估扫描行数</li></ul></li><li><p><strong>聚集 vs 非聚集</strong></p><ul><li><strong>InnoDB</strong> 主键即聚集：物理排序</li><li><strong>二级</strong> 索引存主键 → 回表</li></ul></li></ol><h3 id="b-并发-分布式" tabindex="-1"><a class="header-anchor" href="#b-并发-分布式"><span>B. 并发 &amp; 分布式</span></a></h3><ol><li><p><strong>死锁避免</strong></p><ul><li>固定加锁顺序（ID 小→大）</li><li><code>SELECT … FOR UPDATE</code> 加超时锁</li></ul></li><li><p><strong>悲观锁 vs 乐观锁</strong></p><ul><li>悲观：阻塞等待（行级锁）</li><li>乐观：CAS/版本号 + 重试</li></ul></li><li><p><strong>缓存策略</strong></p><ul><li><strong>穿透</strong>：布隆过滤器提前拦截</li><li><strong>击穿</strong>：热点永不过期 + 单点锁</li><li><strong>雪崩</strong>：TTL 随机化 + 多级缓存</li></ul></li><li><p><strong>高并发计数器</strong></p><ul><li>Redis <code>INCR key</code>：原子自增</li><li>分片：避免单点瓶颈</li></ul></li></ol><hr><h2 id="四、计算机网络-🌐" tabindex="-1"><a class="header-anchor" href="#四、计算机网络-🌐"><span>四、计算机网络 🌐</span></a></h2><ol><li><p><strong>GET vs POST</strong></p><ul><li><strong>GET</strong>：参数在 URL，幂等、可缓存、限长（≈2KB）</li><li><strong>POST</strong>：Body，非幂等、安全性高</li></ul></li><li><p><strong>HTTPS 原理</strong></p><ul><li><strong>握手</strong>：证书（公钥）→ 客户端生成对称密钥 → 双方用对称加密通信</li><li><strong>加密算法</strong>：RSA（非对称）、AES（对称）、HMAC（完整性）</li></ul></li><li><p><strong>三次握手</strong></p><ol><li>C→S: SYN, Seq=x</li><li>S→C: SYN+ACK, Seq=y, Ack=x+1</li><li>C→S: ACK, Seq=x+1, Ack=y+1</li></ol></li><li><p><strong>四次挥手</strong></p><ol><li>C→S: FIN</li><li>S→C: ACK</li><li>S→C: FIN</li><li>C→S: ACK</li></ol></li><li><p><strong>粘包 &amp; 拆包</strong></p><ul><li><strong>原因</strong>：TCP 流无边界</li><li><strong>解决</strong>：定长 / 分隔符（<code>\\r\\n</code>）/ 长度字段</li></ul></li><li><p><strong>UDP vs TCP</strong></p><ul><li><strong>UDP</strong>：轻量无连接，适合实时音视频，能接受丢包</li><li><strong>TCP</strong>：可靠、拥塞控制</li></ul></li><li><p><strong>广播 &amp; 多播</strong></p><ul><li>广播：255.255.255.255 → 子网全体</li><li>多播：224.0.0.0–239.255.255.255 → 特定组</li></ul></li><li><p><strong>DNS 流程</strong><br> 浏览器→本地缓存→<code>/etc/hosts</code>→本地 DNS→根→TLD→权威→返回</p></li><li><p><strong>DoS vs DDoS</strong></p><ul><li><strong>DoS</strong>：单机洪水</li><li><strong>DDoS</strong>：分布式僵尸网络</li><li><strong>防护</strong>：黑洞路由、WAF、CDN、SYN Cookie</li></ul></li></ol><hr><h2 id="五、java-核心-☕️" tabindex="-1"><a class="header-anchor" href="#五、java-核心-☕️"><span>五、Java 核心 ☕️</span></a></h2><ol><li><p><strong>接口 vs 抽象类</strong></p><ul><li>接口：<code>interface</code>，多实现，Java 8+ 可 <code>default</code>/<code>static</code> 方法</li><li>抽象：可含字段/构造器，支持 <code>protected</code> 方法</li></ul></li><li><p><strong>集合对比</strong></p><ul><li><strong>ArrayList</strong>：连续内存，扩容 <code>+50%</code>，随机读快</li><li><strong>LinkedList</strong>：双链表，插入/删除无需搬移</li></ul></li><li><p><strong>finally</strong></p><ul><li><strong>一定执行</strong>，即便 <code>return</code>、抛异常</li><li><strong>注意</strong>：<code>return</code> in finally 覆盖前值</li></ul></li><li><p><strong>ThreadLocal</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ThreadLocal</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Connection</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ThreadLocal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">withInitial</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createConn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Connection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> tl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>线程私有存储，key 为弱引用，<strong>需手动 <code>remove()</code> 避免泄漏</strong></li></ul></li></ol><hr><h2 id="六、分布式系统-高并发设计-🚀" tabindex="-1"><a class="header-anchor" href="#六、分布式系统-高并发设计-🚀"><span>六、分布式系统 &amp; 高并发设计 🚀</span></a></h2><ol><li><p><strong>高并发计数器</strong></p><ul><li>Redis INCR + Hash 分片 + 本地 Cache + 异步合并</li></ul></li><li><p><strong>预约系统</strong></p><ul><li>时间粒度分片 + Redisson 分布式锁 + MQ 异步补偿</li></ul></li><li><p><strong>实时排行榜</strong></p><ul><li>Flink sliding window → Redis ZSET/Top-N 堆</li></ul></li><li><p><strong>搜索权重</strong></p><ul><li>ES 自定义 <code>function_score</code>：TF‑IDF + CTR + 时间衰减</li></ul></li><li><p><strong>热点排行</strong></p><ul><li>滑动窗口统计 + 多级缓存 + 锁保护</li></ul></li><li><p><strong>大规模排队</strong></p><ul><li>公平 FIFO / VIP 优先 + Redis List + Sentinel HA</li></ul></li><li><p><strong>分布式事务</strong></p><ul><li>Seata AT（2PC）/ MQ 事务消息 + 幂等补偿</li></ul></li><li><p><strong>缓存一致性</strong></p><ul><li>双删 + Binlog → Canal 同步 + 布隆过滤 + 随机 TTL</li></ul></li></ol>',21)]))}]]),t=JSON.parse('{"path":"/posts/interview/%E7%BE%8E%E5%9B%A225-04.html","title":"美团春招","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-04-17T00:00:00.000Z","category":["面试"],"tag":["美团"],"description":"美团春招 一、Linux 系统 & 进程管理 🐧 查看内存使用情况 free -h total/used/free/shared/buff/cache/available -m 可按 MB 显示，更精确 top / htop 按 %MEM 排序：Shift + M 查看 RES（常驻集大小）、VIRT（虚拟内存）、SWAP vmstat 1 5 r（...","head":[["meta",{"property":"og:url","content":"https://github.com/Mly66/blog/posts/interview/%E7%BE%8E%E5%9B%A225-04.html"}],["meta",{"property":"og:site_name","content":"马瑶瑶瑶瑶瑶"}],["meta",{"property":"og:title","content":"美团春招"}],["meta",{"property":"og:description","content":"美团春招 一、Linux 系统 & 进程管理 🐧 查看内存使用情况 free -h total/used/free/shared/buff/cache/available -m 可按 MB 显示，更精确 top / htop 按 %MEM 排序：Shift + M 查看 RES（常驻集大小）、VIRT（虚拟内存）、SWAP vmstat 1 5 r（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-20T17:08:08.000Z"}],["meta",{"property":"article:tag","content":"美团"}],["meta",{"property":"article:published_time","content":"2024-04-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-20T17:08:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"美团春招\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-20T17:08:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Mly\\",\\"url\\":\\"https://mly66.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"一、Linux 系统 & 进程管理 🐧","slug":"一、linux-系统-进程管理-🐧","link":"#一、linux-系统-进程管理-🐧","children":[]},{"level":2,"title":"二、Linux 文件 & 权限管理 📁","slug":"二、linux-文件-权限管理-📁","link":"#二、linux-文件-权限管理-📁","children":[]},{"level":2,"title":"三、MySQL & 数据库设计 🛢️","slug":"三、mysql-数据库设计-🛢️","link":"#三、mysql-数据库设计-🛢️","children":[{"level":3,"title":"A. SQL & 索引","slug":"a-sql-索引","link":"#a-sql-索引","children":[]},{"level":3,"title":"B. 并发 & 分布式","slug":"b-并发-分布式","link":"#b-并发-分布式","children":[]}]},{"level":2,"title":"四、计算机网络 🌐","slug":"四、计算机网络-🌐","link":"#四、计算机网络-🌐","children":[]},{"level":2,"title":"五、Java 核心 ☕️","slug":"五、java-核心-☕️","link":"#五、java-核心-☕️","children":[]},{"level":2,"title":"六、分布式系统 & 高并发设计 🚀","slug":"六、分布式系统-高并发设计-🚀","link":"#六、分布式系统-高并发设计-🚀","children":[]}],"git":{"createdTime":1745168888000,"updatedTime":1745168888000,"contributors":[{"name":"Mly66","email":"3127328609@qq.com","commits":1}]},"readingTime":{"minutes":5.32,"words":1595},"filePathRelative":"posts/interview/美团25-04.md","localizedDate":"2024年4月17日","excerpt":"\\n<h2>一、Linux 系统 &amp; 进程管理 🐧</h2>\\n<ol>\\n<li>\\n<p><strong>查看内存使用情况</strong></p>\\n<ul>\\n<li><code>free -h</code>\\n<ul>\\n<li><code>total</code>/<code>used</code>/<code>free</code>/<code>shared</code>/<code>buff/cache</code>/<code>available</code></li>\\n<li><code>-m</code> 可按 MB 显示，更精确</li>\\n</ul>\\n</li>\\n<li><code>top</code> / <code>htop</code>\\n<ul>\\n<li>按 <code>%MEM</code> 排序：<code>Shift + M</code></li>\\n<li>查看 RES（常驻集大小）、VIRT（虚拟内存）、SWAP</li>\\n</ul>\\n</li>\\n<li><code>vmstat 1 5</code>\\n<ul>\\n<li><code>r</code>（运行队列）、<code>b</code>（不可中断睡眠）、<code>si</code>/<code>so</code>（Swap 进出）</li>\\n</ul>\\n</li>\\n<li><code>ps aux --sort=-%mem | head</code>：查看最耗内存进程</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>物理内存 vs 虚拟内存</strong></p>\\n<ul>\\n<li><strong>物理</strong>：直接读写 DRAM</li>\\n<li><strong>虚拟</strong>：CPU + MMU 分页，将虚拟地址映射到物理页框 + Swap\\n<ul>\\n<li><strong>页表</strong>：记录映射关系</li>\\n<li><strong>缺页中断</strong>：访问未映射页 → 内核加载或 Swap 交换</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>Swap 交换内存</strong></p>\\n<ul>\\n<li><strong>用途</strong>：RAM 不够时，非热数据移到磁盘</li>\\n<li><strong>优点</strong>：避免 OOM，临时“超配”</li>\\n<li><strong>缺点</strong>：磁盘 I/O 慢 → 卡顿</li>\\n<li><strong>调优</strong>：<code>swappiness</code> 参数（0–100，越低越少用 Swap）</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>用户 &amp; 用户组管理</strong></p>\\n<ul>\\n<li><code>useradd -m username</code>：同时创建家目录</li>\\n<li><code>usermod -aG wheel username</code>：追加到 wheel 组（sudo）</li>\\n<li><code>passwd -l username</code> / <code>passwd -u username</code>：锁/解锁账户</li>\\n<li><code>groupdel groupname</code>：删除组</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>用户态 vs 内核态</strong></p>\\n<ul>\\n<li><strong>用户态</strong>：只能执行受限指令，APP 崩溃不拖垮内核</li>\\n<li><strong>内核态</strong>：全权限，管理调度、中断、I/O</li>\\n<li><strong>切换</strong>：通过软中断（系统调用）或硬中断</li>\\n<li><strong>面试点</strong>：STI/CLI 指令、特权级（Ring 0/3）</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>进程间通信（IPC）</strong></p>\\n<ul>\\n<li><strong>匿名管道</strong> <code>|</code>：仅限父子进程</li>\\n<li><strong>命名管道</strong> <code>mkfifo /tmp/f</code>：任意进程打开读写</li>\\n<li><strong>共享内存</strong> <code>shmget()/shmat()</code>：最快，需配信号量同步</li>\\n<li><strong>消息队列</strong> <code>msgget()/msgsnd()/msgrcv()</code>：按消息类型过滤</li>\\n<li><strong>信号量</strong> <code>semget()</code>：用于保护临界区</li>\\n<li><strong>Socket</strong>：支持本地（UNIX Domain）与网络通信</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>管道 vs 重定向</strong></p>\\n<ul>\\n<li><strong>管道</strong>：无中介文件，直接内存传输。例：<code>ps aux | grep nginx</code></li>\\n<li><strong>重定向</strong>：与文件交互。例：<code>grep error log.txt &gt; errors.txt</code></li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')}}]);