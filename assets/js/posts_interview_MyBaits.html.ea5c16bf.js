"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4453],{6262:(s,i)=>{i.A=(s,i)=>{const t=s.__vccOpts||s;for(const[s,a]of i)t[s]=a;return t}},1050:(s,i,t)=>{t.r(i),t.d(i,{comp:()=>e,data:()=>l});var a=t(641);const n={},e=(0,t(6262).A)(n,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,i[0]||(i[0]=[(0,a.Fv)('<h1 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>MyBatis</span></a></h1><h2 id="🔥-mybatis-面试八股文" tabindex="-1"><a class="header-anchor" href="#🔥-mybatis-面试八股文"><span><strong>🔥 MyBatis 面试八股文</strong></span></a></h2><hr><h3 id="_1️⃣-什么是-mybatis-📌" tabindex="-1"><a class="header-anchor" href="#_1️⃣-什么是-mybatis-📌"><span><strong>1️⃣ 什么是 MyBatis？📌</strong></span></a></h3><p>✅ <strong>MyBatis 是一款优秀的持久层框架</strong>，它 <strong>支持 SQL 语句的映射、动态 SQL 生成、缓存机制</strong>，简化了 JDBC 操作，避免了冗长的 SQL 代码。</p><p>✅ <strong>MyBatis 不是全 ORM 框架</strong>，它只负责 <strong>SQL 语句的执行 &amp; 结果映射</strong>，不像 Hibernate 那样完全自动化。</p><hr><h3 id="_2️⃣-mybatis-的优缺点-🚀" tabindex="-1"><a class="header-anchor" href="#_2️⃣-mybatis-的优缺点-🚀"><span><strong>2️⃣ MyBatis 的优缺点 🚀</strong></span></a></h3><p>✅ <strong>优点</strong>： ✔️ <strong>灵活性高</strong>：支持手写 SQL，适用于复杂查询。<br> ✔️ <strong>性能优越</strong>：SQL 由开发者编写，避免了 Hibernate 级联查询带来的性能问题。<br> ✔️ <strong>支持动态 SQL</strong>：可用 <code>if</code>、<code>choose</code>、<code>where</code> 等标签动态拼接 SQL。<br> ✔️ <strong>缓存机制</strong>：提供 <strong>一级缓存 &amp; 二级缓存</strong>，提高查询效率。</p><p>❌ <strong>缺点</strong>：</p><ul><li><strong>SQL 需手写</strong>，SQL 语句需要自己管理，维护较复杂。</li><li><strong>不支持自动建表</strong>，不像 JPA/Hibernate，无法自动创建数据库表。</li><li><strong>学习成本较高</strong>，需要掌握 XML 语法和 SQL 语句。</li></ul><hr><h3 id="_3️⃣-mybatis-vs-jpa-hibernate-📊" tabindex="-1"><a class="header-anchor" href="#_3️⃣-mybatis-vs-jpa-hibernate-📊"><span><strong>3️⃣ MyBatis vs JPA（Hibernate）📊</strong></span></a></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>MyBatis</strong></th><th><strong>JPA（Hibernate）</strong></th></tr></thead><tbody><tr><td><strong>SQL 控制</strong></td><td>开发者手写 SQL，控制精准</td><td>自动生成 SQL，简化开发</td></tr><tr><td><strong>查询性能</strong></td><td>SQL 可优化，性能高</td><td>可能生成复杂 SQL，性能受影响</td></tr><tr><td><strong>学习成本</strong></td><td>需要掌握 SQL 和 XML</td><td>简单易学</td></tr><tr><td><strong>缓存机制</strong></td><td>一级缓存 &amp; 二级缓存</td><td>内置缓存优化查询</td></tr><tr><td><strong>维护成本</strong></td><td>SQL 维护量大</td><td>面向对象编程，易维护</td></tr><tr><td><strong>事务管理</strong></td><td>依赖 Spring 管理事务</td><td>内置事务管理</td></tr></tbody></table><p>✅ <strong>结论</strong>：<br><strong>查询复杂、追求高性能，选 MyBatis；</strong><br><strong>CRUD 简单、希望自动化，选 JPA（Hibernate）。</strong></p><hr><h3 id="_4️⃣-mybatis-的核心组件-🛠" tabindex="-1"><a class="header-anchor" href="#_4️⃣-mybatis-的核心组件-🛠"><span><strong>4️⃣ MyBatis 的核心组件 🛠</strong></span></a></h3><p>✅ <strong>SqlSessionFactory</strong>：</p><ul><li>负责创建 <strong>SqlSession</strong> 实例。</li><li><strong>管理数据库连接、事务、缓存等</strong>。</li></ul><p>✅ <strong>SqlSession</strong>：</p><ul><li><strong>执行 SQL 语句</strong>，管理事务（增删改查）。</li><li><strong>获取 Mapper</strong>（MyBatis 通过 <code>Mapper</code> 接口操作数据库）。</li></ul><p>✅ <strong>Mapper（映射器）</strong>：</p><ul><li><strong>存放 SQL 语句的 XML 文件</strong> 或者 <strong>注解 SQL</strong>（<code>@Select</code>、<code>@Insert</code>）。</li><li>关联 <code>Mapper.xml</code>，实现 <strong>Java 方法 → SQL 语句的映射</strong>。</li></ul><p>✅ <strong>配置文件（mybatis-config.xml）</strong>：</p><ul><li><strong>管理全局配置</strong>（环境、数据源、别名、缓存策略等）。</li></ul><p>✅ <strong>映射文件（XXXMapper.xml）</strong>：</p><ul><li><strong>定义 SQL 语句</strong>，提供 CRUD 操作。</li></ul><hr><h3 id="_5️⃣-mybatis-工作流程-🔄" tabindex="-1"><a class="header-anchor" href="#_5️⃣-mybatis-工作流程-🔄"><span><strong>5️⃣ MyBatis 工作流程 🔄</strong></span></a></h3><p>1️⃣ <strong>读取 MyBatis 配置文件</strong>（<code>mybatis-config.xml</code>），创建 <code>SqlSessionFactory</code>。<br> 2️⃣ <strong>通过 <code>SqlSessionFactory</code> 获取 <code>SqlSession</code></strong>，建立数据库连接。<br> 3️⃣ <strong>调用 Mapper 执行 SQL</strong>，查询数据。<br> 4️⃣ <strong>返回结果，MyBatis 解析 SQL 并封装为对象</strong>。<br> 5️⃣ <strong>关闭 <code>SqlSession</code></strong>，释放资源。</p><hr><h3 id="_6️⃣-mybatis-的一级缓存-二级缓存-🔥" tabindex="-1"><a class="header-anchor" href="#_6️⃣-mybatis-的一级缓存-二级缓存-🔥"><span><strong>6️⃣ MyBatis 的一级缓存 &amp; 二级缓存 🔥</strong></span></a></h3><p>✅ <strong>一级缓存（默认开启）</strong>：</p><ul><li>作用范围：<strong>SqlSession 级别</strong>（同一个 <code>SqlSession</code> 内部共享）。</li><li><strong>特点</strong>： <ul><li>查询相同 SQL <strong>不会再次访问数据库</strong>，直接从缓存取。</li><li><code>SqlSession.close()</code> 后缓存失效。</li></ul></li></ul><p>✅ <strong>二级缓存（手动开启）</strong>：</p><ul><li>作用范围：<strong>Mapper 级别（跨 SqlSession 共享）</strong>。</li><li><strong>特点</strong>： <ul><li><strong>数据存储在 <code>namespace</code> 级别的缓存中</strong>，不同 <code>SqlSession</code> 共享。</li><li>需在 <code>Mapper.xml</code> 添加 <code>&lt;cache /&gt;</code> 手动开启。</li><li><strong>事务提交后才会缓存数据</strong>（不会立即写入缓存）。</li></ul></li></ul><hr><h3 id="_7️⃣-mybatis-如何处理懒加载-延迟加载-⏳" tabindex="-1"><a class="header-anchor" href="#_7️⃣-mybatis-如何处理懒加载-延迟加载-⏳"><span><strong>7️⃣ MyBatis 如何处理懒加载（延迟加载）？⏳</strong></span></a></h3><p>✅ <strong>懒加载（Lazy Loading）</strong>：只有 <strong>真正需要用到数据时才会加载</strong>，提高查询效率。<br> ✅ <strong>开启方式</strong>：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">setting</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;lazyLoadingEnabled&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;true&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">setting</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;aggressiveLazyLoading&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;false&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>默认情况下</strong>，MyBatis 只会<strong>对关联对象（如 <code>List&lt;User&gt;</code>）进行懒加载</strong>，<strong>基本数据类型默认立即加载</strong>。</p><hr><h3 id="_8️⃣-mybatis-动态-sql-灵活拼接-sql-语句-📌" tabindex="-1"><a class="header-anchor" href="#_8️⃣-mybatis-动态-sql-灵活拼接-sql-语句-📌"><span><strong>8️⃣ MyBatis 动态 SQL（灵活拼接 SQL 语句）📌</strong></span></a></h3><p>✅ <strong>动态 SQL</strong> 作用：根据不同参数 <strong>动态生成 SQL</strong>，避免 <code>if-else</code> 拼接字符串的方式，提高代码可读性。</p><p>✅ <strong>常用标签</strong>：</p><table><thead><tr><th><strong>标签</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>&lt;if&gt;</code></td><td><strong>条件判断</strong>（<code>if test=&quot;id != null&quot;</code>）</td></tr><tr><td><code>&lt;choose&gt;</code> / <code>&lt;when&gt;</code> / <code>&lt;otherwise&gt;</code></td><td><strong>类似 <code>switch-case</code> 语句</strong></td></tr><tr><td><code>&lt;where&gt;</code></td><td><strong>自动去掉 <code>where</code> 后多余的 <code>AND</code></strong></td></tr><tr><td><code>&lt;set&gt;</code></td><td><strong>用于 <code>UPDATE</code> 语句，去掉 <code>SET</code> 后多余 <code>,</code></strong></td></tr><tr><td><code>&lt;foreach&gt;</code></td><td><strong>用于 <code>IN</code> 语句遍历数组 / List</strong></td></tr></tbody></table><p>✅ <strong>示例</strong>：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;getUserByCondition&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> resultType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;User&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SELECT * FROM user</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;username != null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;AND username = #{username}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;age != null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;AND age = #{age}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_9️⃣-mybatis-中-和-的区别-❓" tabindex="-1"><a class="header-anchor" href="#_9️⃣-mybatis-中-和-的区别-❓"><span><strong>9️⃣ MyBatis 中 <code>#{} </code>和 <code>${}</code> 的区别 ❓</strong></span></a></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>#{}（安全）</strong></th><th><strong>${}（不安全）</strong></th></tr></thead><tbody><tr><td><strong>SQL 解析</strong></td><td><strong>占位符</strong>，使用 <code>PreparedStatement</code> 预编译</td><td><strong>直接拼接 SQL</strong>，容易 SQL 注入</td></tr><tr><td><strong>SQL 语法</strong></td><td><code>WHERE id = #{id}</code></td><td><code>WHERE id = ${id}</code></td></tr><tr><td><strong>适用场景</strong></td><td><strong>安全插入参数</strong></td><td><strong>动态表名 / 列名</strong></td></tr></tbody></table><p>✅ <strong>建议：大部分场景使用 <code>#{}</code>，避免 SQL 注入！</strong></p><hr><h3 id="🔟-mybatis-中-resultmap-和-resulttype" tabindex="-1"><a class="header-anchor" href="#🔟-mybatis-中-resultmap-和-resulttype"><span><strong>🔟 MyBatis 中 <code>resultMap</code> 和 <code>resultType</code></strong></span></a></h3><p>✅ <strong><code>resultType</code>（简单）</strong>：</p><ul><li>适用于 <strong>查询结果和 Java 类字段名一致</strong>。</li><li>例如：</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;getUser&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> resultType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.example.User&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SELECT id, name, age FROM user</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong><code>resultMap</code>（复杂映射）</strong>：</p><ul><li><strong>用于字段名与数据库不匹配的情况</strong>（如 <code>user_name -&gt; userName</code>）。</li><li>例如：</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resultMap</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UserResultMap&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;User&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> column</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;id&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> column</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user_name&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;userName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">resultMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;getUser&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> resultMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UserResultMap&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    SELECT id, user_name FROM user</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="💡-mybatis-进阶问题" tabindex="-1"><a class="header-anchor" href="#💡-mybatis-进阶问题"><span><strong>💡 MyBatis 进阶问题</strong></span></a></h3><p>✅ <strong>MyBatis 如何实现动态数据源切换？</strong></p><ul><li><strong>基于 <code>AbstractRoutingDataSource</code> 结合 AOP 实现数据源动态切换</strong>。</li><li><strong>使用 <code>ThreadLocal</code> 记录当前线程数据源信息</strong>。</li></ul><p>✅ <strong>MyBatis 如何实现分页？</strong></p><ul><li><strong>两种方式</strong>： <ul><li><strong>使用 <code>RowBounds</code>（内存分页，不推荐）</strong>。</li><li><strong>使用数据库 <code>limit</code> 分页（推荐）</strong>：</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SELECT * FROM user LIMIT #{offset}, #{pageSize}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>✅ <strong>MyBatis 插件原理？</strong></p><ul><li><strong>拦截 <code>Executor</code>、<code>StatementHandler</code>、<code>ResultSetHandler</code> 等核心组件</strong>，实现 <strong>SQL 监控、日志打印、自动分页</strong>。</li></ul><hr><h3 id="🔥-总结" tabindex="-1"><a class="header-anchor" href="#🔥-总结"><span><strong>🔥 总结</strong></span></a></h3><p>1️⃣ MyBatis 是 <strong>SQL 映射框架</strong>，支持<strong>手写 SQL &amp; 高性能查询</strong>。<br> 2️⃣ <strong>一级缓存 &amp; 二级缓存</strong> 提高查询效率，但使用需谨慎。<br> 3️⃣ <strong>动态 SQL</strong> 通过 <code>&lt;if&gt;</code>、<code>&lt;foreach&gt;</code> 等标签提高灵活性。<br> 4️⃣ <strong>插件机制</strong> 可用于<strong>拦截 SQL、分页、日志等功能</strong>。</p>',71)]))}]]),l=JSON.parse('{"path":"/posts/interview/MyBaits.html","title":"MyBatis","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-13T00:00:00.000Z","category":["面试"],"tag":["MyBatis"],"description":"MyBatis 🔥 MyBatis 面试八股文 1️⃣ 什么是 MyBatis？📌 ✅ MyBatis 是一款优秀的持久层框架，它 支持 SQL 语句的映射、动态 SQL 生成、缓存机制，简化了 JDBC 操作，避免了冗长的 SQL 代码。 ✅ MyBatis 不是全 ORM 框架，它只负责 SQL 语句的执行 & 结果映射，不像 Hibernat...","head":[["meta",{"property":"og:url","content":"https://github.com/Mly66/blog/posts/interview/MyBaits.html"}],["meta",{"property":"og:site_name","content":"马瑶瑶瑶瑶瑶"}],["meta",{"property":"og:title","content":"MyBatis"}],["meta",{"property":"og:description","content":"MyBatis 🔥 MyBatis 面试八股文 1️⃣ 什么是 MyBatis？📌 ✅ MyBatis 是一款优秀的持久层框架，它 支持 SQL 语句的映射、动态 SQL 生成、缓存机制，简化了 JDBC 操作，避免了冗长的 SQL 代码。 ✅ MyBatis 不是全 ORM 框架，它只负责 SQL 语句的执行 & 结果映射，不像 Hibernat..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-13T02:59:15.000Z"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:published_time","content":"2024-03-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-13T02:59:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-13T02:59:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Mly\\",\\"url\\":\\"https://mly66.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"🔥 MyBatis 面试八股文","slug":"🔥-mybatis-面试八股文","link":"#🔥-mybatis-面试八股文","children":[{"level":3,"title":"1️⃣ 什么是 MyBatis？📌","slug":"_1️⃣-什么是-mybatis-📌","link":"#_1️⃣-什么是-mybatis-📌","children":[]},{"level":3,"title":"2️⃣ MyBatis 的优缺点 🚀","slug":"_2️⃣-mybatis-的优缺点-🚀","link":"#_2️⃣-mybatis-的优缺点-🚀","children":[]},{"level":3,"title":"3️⃣ MyBatis vs JPA（Hibernate）📊","slug":"_3️⃣-mybatis-vs-jpa-hibernate-📊","link":"#_3️⃣-mybatis-vs-jpa-hibernate-📊","children":[]},{"level":3,"title":"4️⃣ MyBatis 的核心组件 🛠","slug":"_4️⃣-mybatis-的核心组件-🛠","link":"#_4️⃣-mybatis-的核心组件-🛠","children":[]},{"level":3,"title":"5️⃣ MyBatis 工作流程 🔄","slug":"_5️⃣-mybatis-工作流程-🔄","link":"#_5️⃣-mybatis-工作流程-🔄","children":[]},{"level":3,"title":"6️⃣ MyBatis 的一级缓存 & 二级缓存 🔥","slug":"_6️⃣-mybatis-的一级缓存-二级缓存-🔥","link":"#_6️⃣-mybatis-的一级缓存-二级缓存-🔥","children":[]},{"level":3,"title":"7️⃣ MyBatis 如何处理懒加载（延迟加载）？⏳","slug":"_7️⃣-mybatis-如何处理懒加载-延迟加载-⏳","link":"#_7️⃣-mybatis-如何处理懒加载-延迟加载-⏳","children":[]},{"level":3,"title":"8️⃣ MyBatis 动态 SQL（灵活拼接 SQL 语句）📌","slug":"_8️⃣-mybatis-动态-sql-灵活拼接-sql-语句-📌","link":"#_8️⃣-mybatis-动态-sql-灵活拼接-sql-语句-📌","children":[]},{"level":3,"title":"9️⃣ MyBatis 中 #{} 和 ${} 的区别 ❓","slug":"_9️⃣-mybatis-中-和-的区别-❓","link":"#_9️⃣-mybatis-中-和-的区别-❓","children":[]},{"level":3,"title":"🔟 MyBatis 中 resultMap 和 resultType","slug":"🔟-mybatis-中-resultmap-和-resulttype","link":"#🔟-mybatis-中-resultmap-和-resulttype","children":[]},{"level":3,"title":"💡 MyBatis 进阶问题","slug":"💡-mybatis-进阶问题","link":"#💡-mybatis-进阶问题","children":[]},{"level":3,"title":"🔥 总结","slug":"🔥-总结","link":"#🔥-总结","children":[]}]}],"git":{"createdTime":1741834755000,"updatedTime":1741834755000,"contributors":[{"name":"Mly66","email":"3127328609@qq.com","commits":1}]},"readingTime":{"minutes":4.36,"words":1307},"filePathRelative":"posts/interview/MyBaits.md","localizedDate":"2024年3月13日","excerpt":"\\n<h2><strong>🔥 MyBatis 面试八股文</strong></h2>\\n<hr>\\n<h3><strong>1️⃣ 什么是 MyBatis？📌</strong></h3>\\n<p>✅ <strong>MyBatis 是一款优秀的持久层框架</strong>，它 <strong>支持 SQL 语句的映射、动态 SQL 生成、缓存机制</strong>，简化了 JDBC 操作，避免了冗长的 SQL 代码。</p>\\n<p>✅ <strong>MyBatis 不是全 ORM 框架</strong>，它只负责 <strong>SQL 语句的执行 &amp; 结果映射</strong>，不像 Hibernate 那样完全自动化。</p>","autoDesc":true}')}}]);