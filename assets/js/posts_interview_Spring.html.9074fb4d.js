"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4329],{6262:(s,t)=>{t.A=(s,t)=>{const n=s.__vccOpts||s;for(const[s,i]of t)n[s]=i;return n}},5679:(s,t,n)=>{n.r(t),n.d(t,{comp:()=>e,data:()=>o});var i=n(641);const r={},e=(0,n(6262).A)(r,[["render",function(s,t){return(0,i.uX)(),(0,i.CE)("div",null,t[0]||(t[0]=[(0,i.Fv)('<h1 id="spring" tabindex="-1"><a class="header-anchor" href="#spring"><span>Spring</span></a></h1><h2 id="🔥-spring-面试八股文" tabindex="-1"><a class="header-anchor" href="#🔥-spring-面试八股文"><span><strong>🔥 Spring 面试八股文</strong></span></a></h2><hr><h3 id="_1️⃣-为什么要使用-spring-🚀" tabindex="-1"><a class="header-anchor" href="#_1️⃣-为什么要使用-spring-🚀"><span><strong>1️⃣ 为什么要使用 Spring？🚀</strong></span></a></h3><p>✅ <strong>Spring 是轻量级的框架</strong>，提供了 <strong>IOC（控制反转） &amp; AOP（面向切面编程）</strong> 两大核心功能：<br> ✔ <strong>IOC 容器</strong>：管理 Bean 的生命周期，<strong>自动注入依赖</strong>，降低耦合。<br> ✔ <strong>AOP 机制</strong>：<strong>解耦业务逻辑 &amp; 系统服务</strong>（如事务管理、日志、权限校验等）。</p><hr><h3 id="_2️⃣-spring-主要模块-📌" tabindex="-1"><a class="header-anchor" href="#_2️⃣-spring-主要模块-📌"><span><strong>2️⃣ Spring 主要模块 📌</strong></span></a></h3><table><thead><tr><th><strong>模块</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td><strong>Spring Core</strong></td><td>提供 IoC 控制反转 &amp; 依赖注入</td></tr><tr><td><strong>Spring AOP</strong></td><td>提供面向切面编程，解耦业务逻辑</td></tr><tr><td><strong>Spring WebMVC</strong></td><td>提供 MVC 结构，支持 SpringMVC</td></tr><tr><td><strong>Spring ORM</strong></td><td>支持 JPA、Hibernate、MyBatis 等 ORM 框架</td></tr><tr><td><strong>Spring Test</strong></td><td>提供测试支持，方便单元测试</td></tr><tr><td><strong>Spring WebSocket</strong></td><td>支持 WebSocket 连接</td></tr></tbody></table><hr><h3 id="_3️⃣-spring-ioc-控制反转-💡" tabindex="-1"><a class="header-anchor" href="#_3️⃣-spring-ioc-控制反转-💡"><span><strong>3️⃣ Spring IoC（控制反转）💡</strong></span></a></h3><p>✅ <strong>什么是 IoC？</strong></p><ul><li><strong>控制反转（Inversion of Control，IoC）</strong>：对象的创建不由程序控制，而是 <strong>交给 Spring 容器管理</strong>。</li><li><strong>DI（Dependency Injection，依赖注入）</strong>：Spring <strong>自动注入对象的依赖关系</strong>，降低耦合性。</li></ul><p>✅ <strong>IoC 的优点</strong>： ✔ <strong>降低代码耦合度</strong>，符合<strong>依赖倒置原则（DIP）</strong>。<br> ✔ <strong>统一资源管理</strong>，Spring 维护对象实例，开发者<strong>无需手动创建对象</strong>。</p><p>✅ <strong>DI 的几种实现方式</strong>： ✔ <strong>构造函数注入</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserRepository</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> userRepository;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✔ <strong>Setter 注入</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserRepository</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setUserRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserRepository</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> userRepository;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✔ <strong>注解方式</strong>（<code>@Autowired</code>、<code>@Resource</code>、<code>@Qualifier</code>）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 默认按类型注入</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Resource</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 默认按名称注入，找不到再按类型</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Qualifier</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;userRepository&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 指定具体 Bean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>为什么官方推荐构造器注入？</strong></p><ul><li><strong><code>@Autowired</code> 可能会导致空指针异常（NPE）</strong>。</li><li>推荐使用 <strong>Lombok 的 <code>@RequiredArgsConstructor</code> 自动生成构造方法</strong>，简化代码。</li></ul><hr><h3 id="_4️⃣-spring-bean-作用域-🔥" tabindex="-1"><a class="header-anchor" href="#_4️⃣-spring-bean-作用域-🔥"><span><strong>4️⃣ Spring Bean &amp; 作用域 🔥</strong></span></a></h3><p>✅ <strong>Spring Bean 是什么？</strong></p><ul><li><strong>Spring 管理的 Java 对象</strong>，生命周期由 Spring 控制，与普通 JavaBean 不同。</li></ul><p>✅ <strong>Bean 作用域（<code>@Scope</code>）</strong></p><table><thead><tr><th><strong>作用域</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>singleton</strong></td><td><strong>默认</strong>，单例模式，整个应用共享一个 Bean</td></tr><tr><td><strong>prototype</strong></td><td>每次获取 Bean 时，都会创建一个新实例</td></tr><tr><td><strong>request</strong></td><td>HTTP 请求级别的 Bean，每次请求创建新实例</td></tr><tr><td><strong>session</strong></td><td>HTTP 会话级别的 Bean，每个 session 共享</td></tr><tr><td><strong>global-session</strong></td><td>跨应用 session 共享（一般用于 Portlet）</td></tr><tr><td><strong>websocket</strong></td><td>WebSocket 连接级别的 Bean</td></tr></tbody></table><p>✅ <strong>Bean 生命周期</strong></p><ul><li><strong>实例化</strong> → <strong>属性赋值</strong> → <strong>初始化</strong> → <strong>销毁</strong></li><li><strong>扩展接口</strong>： <ul><li><code>BeanPostProcessor</code>：初始化前后增强 Bean。</li><li><code>InstantiationAwareBeanPostProcessor</code>：实例化前后增强。</li><li><code>Aware</code> 接口：获取 IoC 资源，如 <code>ApplicationContext</code>。</li></ul></li></ul><p>✅ <strong>Bean 线程安全问题</strong></p><ul><li><strong>单例 Bean</strong> <strong>⚠可能存在线程安全问题</strong>，特别是有 <strong>可变状态</strong> 时（如 <code>List</code>）。</li><li><strong>解决方案</strong>： ✔ <strong>使用 <code>prototype</code> 作用域</strong>（但会频繁创建实例）。<br> ✔ <strong>使用 <code>ThreadLocal</code> 维护线程级变量</strong>。<br> ✔ <strong>使用线程安全集合，如 <code>ConcurrentHashMap</code></strong>。</li></ul><hr><h3 id="_5️⃣-spring-aop-面向切面编程-💡" tabindex="-1"><a class="header-anchor" href="#_5️⃣-spring-aop-面向切面编程-💡"><span><strong>5️⃣ Spring AOP（面向切面编程）💡</strong></span></a></h3><p>✅ <strong>AOP 作用</strong>：</p><ul><li><strong>不修改原代码的情况下增强功能</strong>，如 <strong>日志、事务管理、权限校验</strong>。</li><li><strong>Spring AOP 基于动态代理</strong>： <ul><li><strong>JDK 代理</strong>（默认，要求类实现接口）。</li><li><strong>CGLIB 代理</strong>（无接口时，基于字节码生成子类）。</li></ul></li></ul><p>✅ <strong>AOP 术语</strong></p><table><thead><tr><th><strong>术语</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>切点（PointCut）</strong></td><td>需要增强的方法（通过表达式定义）</td></tr><tr><td><strong>通知（Advice）</strong></td><td>具体增强逻辑</td></tr><tr><td><strong>切面（Aspect）</strong></td><td><strong>切点 + 通知</strong> 的结合</td></tr><tr><td><strong>织入（Weaving）</strong></td><td>将切面与目标对象结合的过程</td></tr></tbody></table><p>✅ <strong>通知类型</strong></p><table><thead><tr><th><strong>通知</strong></th><th><strong>执行时机</strong></th></tr></thead><tbody><tr><td><code>@Before</code></td><td>方法执行前</td></tr><tr><td><code>@After</code></td><td>方法执行后</td></tr><tr><td><code>@AfterReturning</code></td><td>方法返回后</td></tr><tr><td><code>@AfterThrowing</code></td><td>方法抛出异常后</td></tr><tr><td><code>@Around</code></td><td>环绕通知，可控制方法执行</td></tr></tbody></table><p>✅ <strong>AOP 失效场景</strong></p><ul><li><strong>类内部方法调用（<code>this</code> 调用）</strong>：AOP 依赖动态代理，而 <code>this</code> 调用不会经过代理对象。</li><li><strong><code>private</code> / <code>final</code> 方法</strong>：不能被代理。</li></ul><hr><h3 id="_6️⃣-spring-事务管理-transactional-🔥" tabindex="-1"><a class="header-anchor" href="#_6️⃣-spring-事务管理-transactional-🔥"><span><strong>6️⃣ Spring 事务管理（<code>@Transactional</code>）🔥</strong></span></a></h3><p>✅ <strong>Spring 事务的作用</strong></p><ul><li><strong>保证多条 SQL 操作要么全部成功，要么全部失败</strong>，防止数据不一致。</li></ul><p>✅ <strong>事务传播机制</strong></p><table><thead><tr><th><strong>传播行为</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>REQUIRED</code></td><td>默认值，<strong>如果有事务就加入，没有就新建</strong></td></tr><tr><td><code>REQUIRES_NEW</code></td><td><strong>新建事务，不管是否已有事务</strong></td></tr><tr><td><code>NESTED</code></td><td><strong>嵌套事务，外部回滚，内部回滚</strong></td></tr><tr><td><code>SUPPORTS</code></td><td><strong>支持事务，没有事务就普通执行</strong></td></tr><tr><td><code>MANDATORY</code></td><td><strong>必须在已有事务下运行，否则报错</strong></td></tr><tr><td><code>NOT_SUPPORTED</code></td><td><strong>不支持事务，挂起当前事务</strong></td></tr><tr><td><code>NEVER</code></td><td><strong>不支持事务，已有事务时报错</strong></td></tr></tbody></table><p>✅ <strong>事务失效场景</strong> ✔ <strong>方法不是 <code>public</code></strong>（<code>@Transactional</code> 只能作用在 <code>public</code> 方法上）。<br> ✔ <strong>方法被 <code>this</code> 调用</strong>（不会经过代理）。<br> ✔ <strong>异常被 <code>catch</code> 捕获</strong>（事务不会回滚）。<br> ✔ <strong>数据库引擎不支持事务</strong>（如 <code>MyISAM</code>）。</p><hr><h3 id="_7️⃣-spring-循环依赖-💡" tabindex="-1"><a class="header-anchor" href="#_7️⃣-spring-循环依赖-💡"><span><strong>7️⃣ Spring 循环依赖 💡</strong></span></a></h3><p>✅ <strong>Spring 如何解决循环依赖？</strong></p><ul><li><strong>三级缓存机制</strong>： <ol><li><strong>一级缓存</strong>：存完整 Bean（单例池）。</li><li><strong>二级缓存</strong>：存未初始化的 Bean。</li><li><strong>三级缓存</strong>：存 Bean 工厂（解决 AOP 代理问题）。</li></ol></li></ul><p>✅ <strong>为什么不用两级缓存？</strong></p><ul><li><strong>如果 Bean 需要 AOP 代理，初始化后才能生成代理对象</strong>，而 <strong>属性注入发生在初始化前</strong>，所以用 <strong>三级缓存存代理对象的工厂</strong>。</li></ul><p>✅ <strong>无法解决的情况</strong></p><ul><li><strong>构造器注入的循环依赖</strong>（因为构造器在属性注入前执行）。</li></ul><hr><h3 id="_8️⃣-spring-boot-自动装配-enableautoconfiguration-🔥" tabindex="-1"><a class="header-anchor" href="#_8️⃣-spring-boot-自动装配-enableautoconfiguration-🔥"><span><strong>8️⃣ Spring Boot 自动装配（<code>@EnableAutoConfiguration</code>）🔥</strong></span></a></h3><p>✅ <strong>Spring Boot 启动流程</strong> ✔ <strong>SpringApplication.run()</strong> 生成 <code>SpringApplication</code> 实例，创建监听器。<br> ✔ <strong>加载 <code>META-INF/spring.factories</code> 自动配置类</strong>（<code>@EnableAutoConfiguration</code>）。<br> ✔ <strong>过滤不满足 <code>@ConditionalOnXxx</code> 条件的配置</strong>。<br> ✔ <strong>启动 IoC 容器，完成 Bean 依赖注入</strong>。</p><p>✅ <strong>自定义 Starter</strong> ✔ <strong>创建 <code>META-INF/spring.factories</code></strong><br> ✔ <strong>使用 <code>@ConditionalOnProperty</code> 等注解控制自动装配</strong><br> ✔ <strong>编写自动配置类 <code>@Configuration</code></strong></p><hr><h3 id="🔥-总结" tabindex="-1"><a class="header-anchor" href="#🔥-总结"><span><strong>🔥 总结</strong></span></a></h3><p>1️⃣ <strong>Spring 核心：IoC（依赖注入）+ AOP（切面编程）</strong>。<br> 2️⃣ <strong>Bean 作用域、生命周期、线程安全问题</strong>。<br> 3️⃣ <strong>Spring 事务管理（<code>@Transactional</code>）及事务传播机制</strong>。<br> 4️⃣ <strong>Spring AOP 代理模式，及拦截失效原因</strong>。<br> 5️⃣ <strong>Spring Boot 自动装配原理</strong>。</p>',63)]))}]]),o=JSON.parse('{"path":"/posts/interview/Spring.html","title":"Spring","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-13T00:00:00.000Z","category":["面试"],"tag":["Spring"],"description":"Spring 🔥 Spring 面试八股文 1️⃣ 为什么要使用 Spring？🚀 ✅ Spring 是轻量级的框架，提供了 IOC（控制反转） & AOP（面向切面编程） 两大核心功能： ✔ IOC 容器：管理 Bean 的生命周期，自动注入依赖，降低耦合。 ✔ AOP 机制：解耦业务逻辑 & 系统服务（如事务管理、日志、权限校验等）。 2️⃣ ...","head":[["meta",{"property":"og:url","content":"https://github.com/Mly66/blog/posts/interview/Spring.html"}],["meta",{"property":"og:site_name","content":"马瑶瑶瑶瑶瑶"}],["meta",{"property":"og:title","content":"Spring"}],["meta",{"property":"og:description","content":"Spring 🔥 Spring 面试八股文 1️⃣ 为什么要使用 Spring？🚀 ✅ Spring 是轻量级的框架，提供了 IOC（控制反转） & AOP（面向切面编程） 两大核心功能： ✔ IOC 容器：管理 Bean 的生命周期，自动注入依赖，降低耦合。 ✔ AOP 机制：解耦业务逻辑 & 系统服务（如事务管理、日志、权限校验等）。 2️⃣ ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-13T03:04:50.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-03-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-13T03:04:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-13T03:04:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Mly\\",\\"url\\":\\"https://mly66.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"🔥 Spring 面试八股文","slug":"🔥-spring-面试八股文","link":"#🔥-spring-面试八股文","children":[{"level":3,"title":"1️⃣ 为什么要使用 Spring？🚀","slug":"_1️⃣-为什么要使用-spring-🚀","link":"#_1️⃣-为什么要使用-spring-🚀","children":[]},{"level":3,"title":"2️⃣ Spring 主要模块 📌","slug":"_2️⃣-spring-主要模块-📌","link":"#_2️⃣-spring-主要模块-📌","children":[]},{"level":3,"title":"3️⃣ Spring IoC（控制反转）💡","slug":"_3️⃣-spring-ioc-控制反转-💡","link":"#_3️⃣-spring-ioc-控制反转-💡","children":[]},{"level":3,"title":"4️⃣ Spring Bean & 作用域 🔥","slug":"_4️⃣-spring-bean-作用域-🔥","link":"#_4️⃣-spring-bean-作用域-🔥","children":[]},{"level":3,"title":"5️⃣ Spring AOP（面向切面编程）💡","slug":"_5️⃣-spring-aop-面向切面编程-💡","link":"#_5️⃣-spring-aop-面向切面编程-💡","children":[]},{"level":3,"title":"6️⃣ Spring 事务管理（@Transactional）🔥","slug":"_6️⃣-spring-事务管理-transactional-🔥","link":"#_6️⃣-spring-事务管理-transactional-🔥","children":[]},{"level":3,"title":"7️⃣ Spring 循环依赖 💡","slug":"_7️⃣-spring-循环依赖-💡","link":"#_7️⃣-spring-循环依赖-💡","children":[]},{"level":3,"title":"8️⃣ Spring Boot 自动装配（@EnableAutoConfiguration）🔥","slug":"_8️⃣-spring-boot-自动装配-enableautoconfiguration-🔥","link":"#_8️⃣-spring-boot-自动装配-enableautoconfiguration-🔥","children":[]},{"level":3,"title":"🔥 总结","slug":"🔥-总结","link":"#🔥-总结","children":[]}]}],"git":{"createdTime":1741835090000,"updatedTime":1741835090000,"contributors":[{"name":"Mly66","email":"3127328609@qq.com","commits":1}]},"readingTime":{"minutes":4.65,"words":1396},"filePathRelative":"posts/interview/Spring.md","localizedDate":"2024年3月13日","excerpt":"\\n<h2><strong>🔥 Spring 面试八股文</strong></h2>\\n<hr>\\n<h3><strong>1️⃣ 为什么要使用 Spring？🚀</strong></h3>\\n<p>✅ <strong>Spring 是轻量级的框架</strong>，提供了 <strong>IOC（控制反转） &amp; AOP（面向切面编程）</strong> 两大核心功能：<br>\\n✔ <strong>IOC 容器</strong>：管理 Bean 的生命周期，<strong>自动注入依赖</strong>，降低耦合。<br>\\n✔ <strong>AOP 机制</strong>：<strong>解耦业务逻辑 &amp; 系统服务</strong>（如事务管理、日志、权限校验等）。</p>","autoDesc":true}')}}]);